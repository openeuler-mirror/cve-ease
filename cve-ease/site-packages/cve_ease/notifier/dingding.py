# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import requests
import json
from .base import NotifierBase
import logging
import datetime

logger = logging.getLogger('cve-ease')


class Dingding(NotifierBase):
    """
    钉钉群聊机器人
    官方文档：https://open.dingtalk.com/document/robots/custom-robot-access
    每个机器人每分钟最多发送20条消息到群里，如果超过20条，会限流10分钟。
    """

    def __init__(self, gconfig, keyname='status_key'):

        self._config = gconfig
        # check wanip
        if not hasattr(gconfig, 'WANIP'):
            from cve_ease.helper import get_wanip
            self._wanip = get_wanip()
        else:
            self._wanip = gconfig.WANIP

        # check watcher
        self._watcher = None
        if hasattr(gconfig, 'WATCHER') and 'dingding_notifier' in gconfig.WATCHER:
            self._watcher = gconfig.WATCHER['dingding_notifier']

        self._key = None
        for (name, value) in gconfig.config['dingding'].items():
            if name == keyname:
                self._key = value

    def do_send(self, data):
        res = None
        headers = {'Content-Type': 'application/json'}
        url = f'https://oapi.dingtalk.com/robot/send?access_token={self._key}'
        r = requests.post(url=url, headers=headers, data=json.dumps(data))
        try:
            res = json.loads(r.text)
        except:
            pass
        if r.status_code == 200 and res and 'errcode' in res and 0 == res['errcode']:
            logger.debug('[+] dingdingBot send ok!')
        else:
            logger.error('[-] dingdingBot send failed!')
            logger.error(r.text)

    def send_text(self, msg="", debug=False):
        data = {
            "msgtype": "text",
            "text": {
                "content": 'cve-ease notifier: \n\n' + msg,
            },
        }
        if debug:
            logger.debug(json.dumps(data, indent=4))
        self.do_send(data)

    def send_markdown(self, msg):
        """
        官方 markdown类型 消息demo：

        {
             "msgtype": "markdown",
             "markdown": {
                 "title":"杭州天气",
                 "text": "#### 杭州天气 @150XXXXXXXX \n\n > 9度，西北风1级，空气良89，相对温度73%\n\n >
                 ![screenshot](https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png)\n\n >
                  ###### 10点20分发布 [天气](https://www.dingtalk.com) \n\n"
             },
              "at": {
                  "atMobiles": [
                      "150XXXXXXXX"
                  ],
                  "atUserIds": [
                      "user123"
                  ],
                  "isAtAll": false
              }
         }

        :param msg:
        :return:
        """
        data = {
            "msgtype": "markdown",
            "markdown": {
                "title": "Msg from CVE-EASE",
                "text": msg,
            },
        }
        self.do_send(data)

    def check_enabled(self):
        if 'enabled' not in self._config.config['dingding'] or "1" != self._config.config['dingding']['enabled']:
            logger.debug(' * dingding notifier is not enabled')
            return False
        return True

    def do_cve_watcher_notifier(self, diff):
        filter_diff = diff
        if self._watcher and 'watch_pkg' in self._watcher:
            filter_pkglist = self._watcher['watch_pkg']
            for status in filter_diff:
                for index, cve in enumerate(filter_diff[status]):
                    if cve.packageName in filter_pkglist:
                        continue
                    del filter_diff[status][index]

    def do_cve_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" dingding do_cve_notifier")

        self.send_markdown(self.pretty_cve_udpate(diff))

        # do watcher
        do_cve_watcher_notifier(diff)

    def do_cve_status_notifier(self, cveDatabaseList):
        if not self.check_enabled():
            return

        self.send_markdown(self.pretty_cve_status_record(cveDatabaseList))
        logger.debug(" dingding cve status notifier send msg")

    def pretty_cve_record(self, record):
        return (
                ">评分:[**<font color=\"red\">{}</font>**] {}\n\n" +
                " 包名: {}\n\n" +
                " 发布时间: **{}**\n\n" +
                " [详情链接](https://www.openeuler.org/zh/security/cve/detail/?cveId={}&packageName={})\n\n"
        ).format(
            record["cvsssCoreNVD"] if record["cvsssCoreNVD"] else record["cvsssCoreOE"],
            record["cveId"],
            record["packageName"],
            record["updateTime"],
            record["cveId"],
            record["packageName"],
        )

    def pretty_cve_status_record(self, cveDatabaseList):
        message = (
                "### Msg from CVE-EASE: \n\n" +
                " {}\n\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n\n" +
                "Top**{}**变更信息概况:\n\n" +
                "\n\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self._wanip,
            len(cveDatabaseList),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        for r in cveDatabaseList[:count]:
            message += self.pretty_cve_record(r)

        message += """\n\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n\n"""
        return message

    def pretty_cve_udpate(self, diff):
        message = (
                "### Msg from CVE-EASE: \n\n" +
                " {}\n\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n\n" +
                "更新情况:\n\n" +
                " 新增:**<font color=\"red\">{}</font>**" +
                " 修改:**<font color=\"red\">{}</font>**" +
                " 删减:**<font color=\"red\">{}</font>**\n\n" +
                "Top**{}**变更信息概况:\n\n" +
                "\n\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self._wanip,
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_cve_record(r)

        message += """\n\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n\n"""
        return message

    def do_sa_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" dingding do_sa_notifier")

        self.send_markdown(self.pretty_sa_udpate(diff))

    def pretty_sa_record(self, record):
        return (
                ">编号:{}\n\n" +
                " 包名: **{}**\n\n" +
                " CVEID: {}\n\n" +
                " 发布时间: **{}**\n\n" +
                " [详情链接](https://www.openeuler.org/zh/security/safety-bulletin/detail/?id={})\n\n"
        ).format(
            record["securityNoticeNo"],
            record["affectedComponent"],
            record["cveId"],
            record["updateTime"],
            record["securityNoticeNo"],
        )

    def pretty_sa_udpate(self, diff):
        message = (
                "### Msg from CVE-EASE: \n\n" +
                " {}\n\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n\n" +
                "SA记录总数: **<font color=\"red\">{}</font>**\n\n" +
                "更新情况:\n\n" +
                " 新增:**<font color=\"red\">{}</font>**" +
                " 修改:**<font color=\"red\">{}</font>**" +
                " 删减:**<font color=\"red\">{}</font>**\n\n" +
                "Top**{}**变更信息概况:\n\n" +
                "\n\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self._wanip,
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_sa_record(r)

        message += """\n\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n\n"""
        return message
