# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

import datetime
import json
import logging
from datetime import datetime

import requests
from cve_ease.helper import data_to_csv
from cve_ease.models import CVE, SA

from .base import NotifierBase

logger = logging.getLogger('cve-ease')


class Wecom(NotifierBase):
    """
    企业微信群聊机器人
    官方文档：https://developer.work.weixin.qq.com/document/path/91770
    每个机器人发送的消息不能超过20条/分钟，大概3s一条即可
    """

    def __init__(self, gconfig, keyname='status_key'):
        self._name = 'wecom_notifier'
        self._config = gconfig
        # check wanip
        if not hasattr(gconfig, 'WANIP'):
            from cve_ease.helper import get_wanip
            self.wanip = get_wanip()
        else:
            self.wanip = gconfig.WANIP

        # check watcher
        self._watcher = None
        if hasattr(gconfig, 'WATCHER'):
            self._watcher = gconfig.WATCHER

        self._key = None
        for (name, value) in gconfig.config['wecom'].items():
            if name == keyname:
                self._key = value

    def do_send_file(self, data, key=None, filename="sample.txt"):
        """
        企业微信发送文件接口
        要求文件大小在5B~20M之间
        :param data:
        :return:
        """
        headers = {
            'Content-Type': 'multipart/form-data',
        }
        files = {
            'file': (filename, data),
        }
        res = None
        # https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=KEY&type=TYPE
        if key:
            url = f'https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key={key}&type=file'
        else:
            url = f'https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key={self._key}&type=file'
        r = requests.post(url=url, headers=headers, files=files)
        # logger.debug(r.text)
        try:
            res = json.loads(r.text)
        except:
            pass
        if r.status_code == 200 and res and 'errcode' in res and 0 == res['errcode']:
            logger.debug('[+] wecomBot 发送文件成功')
            try:
                res = json.loads(r.text)
            except Exception as e:
                logger.error("json loads failed!", str(e))
                return ""
            if "media_id" in res and '' != res["media_id"]:
                return res["media_id"]
        else:
            logger.error('[-] wecomBot 发送文件失败')
            logger.error(r.text)
        return ""

    def do_send(self, data, key=None):
        res = None
        headers = {'Content-Type': 'application/json'}
        if key:
            url = f'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key={key}'
        else:
            url = f'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key={self._key}'
        r = requests.post(url=url, headers=headers, data=json.dumps(data))
        # logger.debug(r.text)
        try:
            res = json.loads(r.text)
        except:
            pass
        if r.status_code == 200 and res and 'errcode' in res and 0 == res['errcode']:
            logger.debug('[+] wecomBot 发送成功')
        else:
            logger.error('[-] wecomBot 发送失败')
            logger.error(r.text)

    def send_markdown(self, msg, key=None):
        data = {
            "msgtype": "markdown",
            "markdown": {
                "content": msg,
            },
        }
        self.do_send(data, key)

    def send_text(self, msg="", mentioned_mobile_list=[], key=None, debug=False):
        data = {
            "msgtype": "text",
            "text": {
                "content": msg,
                "mentioned_list": [],
                "mentioned_mobile_list": mentioned_mobile_list,
            }
        }
        if debug:
            logger.debug(json.dumps(data, indent=4))
        self.do_send(data, key)

    def send_news(self, msg):
        data = {
            "msgtype": "news",
            "news": {
                "articles": [
                    {
                        "title": msg["title"] if "title" in msg else '',
                        "description": msg["description"] if "description" in msg else '',
                        "url": msg["url"] if "url" in msg else '',
                        "picurl": msg["picurl"] if "picurl" in msg else '',
                    }
                ]
            }
        }
        self.do_send(data)

    def send_image(self, msg):
        """图片（base64编码前）最大不能超过2M，支持JPG,PNG格式"""
        data = {
            "msgtype": "image",
            "image": {
                "base64": msg["base64"] if "base64" in msg else '',
                "md5": msg["md5"] if "md5" in msg else '',
            }
        }
        self.do_send(data)

    def send_file(self, msg, key=None, filename="sample.txt"):
        """图片（base64编码前）最大不能超过2M，支持JPG,PNG格式"""
        data = {
            "msgtype": "file",
            "file": {
                "media_id": self.do_send_file(msg, key, filename)
            }
        }
        if data["file"]["media_id"]:
            self.do_send(data, key)
        else:
            logger.error("upload file failed! no media_id found.")

    def check_enabled(self):
        if 'enabled' not in self._config.config['wecom'] or "1" != self._config.config['wecom']['enabled']:
            logger.debug(' * wecom notifier is not enabled')
            return False
        return True

    def check_status_nofier_enabled(self):
        if 'status_notifier_enabled' not in self._config.config['wecom'] or \
                "1" != self._config.config['wecom']['status_notifier_enabled']:
            logger.debug(' * wecom status notifier is not enabled')
            return False
        return True

    def do_cve_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" wecom do_cve_notifier")

        self.send_markdown(self.pretty_cve_udpate(diff))
        cve_data = data_to_csv(diff['data'], CVE.COLUMN)

        # whether need csv data, optional
        self.send_file(cve_data, filename="CVE完整信息.csv")
        if len(diff["add"]) > 0:
            new_cve_data = data_to_csv(diff["add"], CVE.COLUMN)
            self.send_file(new_cve_data, filename="新增CVE信息.csv")
        if len(diff["modify"]) > 0:
            modify_cve_data = data_to_csv(diff["modify"], CVE.COLUMN)
            self.send_file(modify_cve_data, filename="修改CVE信息.csv")
        if len(diff["delete"]) > 0:
            del_cve_data = data_to_csv(diff["delete"], CVE.COLUMN)
            self.send_file(del_cve_data, filename="删减CVE信息.csv")

        # do watcher
        self.do_cve_watcher_notifier(diff)

    def do_cve_watcher_notifier(self, diff_or_list):
        if self._watcher and isinstance(diff_or_list, dict):
            # only for diff notifer
            for w in self._watcher:
                filter_diff = diff_or_list
                current_watcher = self._watcher[w]
                filter_pkglist = current_watcher['watch_pkg']
                flag = False
                for status in filter_diff:
                    for index, cve in enumerate(filter_diff[status]):
                        if cve.packageName in filter_pkglist:
                            flag = True
                            continue
                        del filter_diff[status][index]
                logger.debug(f" watcher {w} {filter_pkglist} got pkgs len [{len(filter_diff)}]")
                if flag and self._name in current_watcher:
                    self.send_markdown(self.pretty_cve_udpate(filter_diff), key=current_watcher[self._name])
        elif self._watcher and isinstance(diff_or_list, list):
            # only for info notifier
            for w in self._watcher:
                match = []
                current_watcher = self._watcher[w]
                filter_pkglist = current_watcher['watch_pkg']
                flag = False
                for index, cve in enumerate(diff_or_list):
                    if any(cve["packageName"] in pkg for pkg in filter_pkglist):
                        # logger.debug(f" watcher add {cve['packageName']}")
                        match.append(diff_or_list[index])
                        flag = True
                logger.debug(f" watcher {w} {filter_pkglist} got pkgs len [{len(match)}]")
                if flag and self._name in current_watcher:
                    self.send_markdown(
                        self.pretty_cve_watcher_status_record(match, filter_pkglist),
                        key=current_watcher[self._name]
                    )
                    cve_data = data_to_csv(match, CVE.COLUMN)
                    self.send_file(cve_data, key=current_watcher[self._name], filename="CVE信息清单.csv")
                    logger.debug(" wecom cve status notifier send file")
        else:
            logger.debug("no watcher find in config")

    def do_cve_status_notifier(self, cveDatabaseList):
        if not self.check_enabled():
            return

        self.send_markdown(self.pretty_cve_status_record(cveDatabaseList))
        logger.debug(" wecom cve status notifier send msg")

        del_cve_data = data_to_csv(cveDatabaseList, CVE.COLUMN)
        self.send_file(del_cve_data, filename="CVE完整信息.csv")
        logger.debug(" wecom cve status notifier send file")

        # do watcher
        self.do_cve_watcher_notifier(cveDatabaseList)

    def pretty_cve_watcher_status_record(self, cveDatabaseList, filter_pkglist):
        message = (
                "### Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n" +
                "包过滤: **<font color=\"warning\">{}</font>**\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n" +
                "更新情况:\n" +
                "Top**{}**变更信息概况:\n" +
                "\n"
        ).format(
            datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self.wanip,
            ",".join(filter_pkglist),
            len(cveDatabaseList),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        for r in cveDatabaseList[:count]:
            message += self.pretty_cve_record(r)

        message += """\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n"""
        return message

    def pretty_cve_status_record(self, cveDatabaseList):
        message = (
                "### Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n" +
                "更新情况:\n" +
                "Top**{}**变更信息概况:\n" +
                "\n"
        ).format(
            datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self.wanip,
            len(cveDatabaseList),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        for r in cveDatabaseList[:count]:
            message += self.pretty_cve_record(r)

        message += """\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n"""
        return message

    def pretty_cve_record(self, record):
        return (
                "`评分:[**<font color=\"red\">{}</font>**] {}`\n" +
                " 包名: {}\n" +
                " 发布时间: **{}**\n" +
                " [详情链接](https://www.openeuler.org/zh/security/cve/detail/?cveId={}&packageName={})\n"
        ).format(
            record["cvsssCoreNVD"] if record["cvsssCoreNVD"] else record["cvsssCoreOE"],
            record["cveId"],
            record["packageName"],
            record["updateTime"],
            record["cveId"],
            record["packageName"],
        )

    def pretty_cve_watcher_udpate(self, diff, filter_pkglist):
        message = (
                "### Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n" +
                "包过滤: **<font color=\"warning\">{}</font>**\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n" +
                "更新情况:\n" +
                " 新增:**<font color=\"red\">{}</font>**" +
                " 修改:**<font color=\"red\">{}</font>**" +
                " 删减:**<font color=\"red\">{}</font>**\n" +
                "Top**{}**变更信息概况:\n" +
                "\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self.wanip,
            ",".join(filter_pkglist),
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_cve_record(r)

        message += """\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n"""
        return message

    def pretty_cve_udpate(self, diff):
        message = (
                "### Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n" +
                "CVE记录总数: **<font color=\"red\">{}</font>**\n" +
                "更新情况:\n" +
                " 新增:**<font color=\"red\">{}</font>**" +
                " 修改:**<font color=\"red\">{}</font>**" +
                " 删减:**<font color=\"red\">{}</font>**\n" +
                "Top**{}**变更信息概况:\n" +
                "\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self.wanip,
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_cve_record(r)

        message += """\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n"""
        return message

    def do_sa_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" wecom do_sa_notifier")

        self.send_markdown(self.pretty_sa_udpate(diff))

        # need remove list value
        for r in diff['data']:
            if 'packageHelperList' in r: del r['packageHelperList']
            if 'packageList' in r: del r['packageList']
            if 'referenceList' in r: del r['referenceList']
            if 'cveList' in r: del r['cveList']
        sa_data = data_to_csv(diff['data'], SA.COLUMN)

        # whether need csv data, optional
        self.send_file(sa_data, filename="SA完整信息.csv")

        if len(diff["add"]) > 0:
            for r in diff['add']:
                if 'packageHelperList' in r: del r['packageHelperList']
                if 'packageList' in r: del r['packageList']
                if 'referenceList' in r: del r['referenceList']
                if 'cveList' in r: del r['cveList']
            add_sa_data = data_to_csv(diff["add"], SA.COLUMN)
            self.send_file(add_sa_data, filename="新增SA信息.csv")
        if len(diff["modify"]) > 0:
            for r in diff['modify']:
                if 'packageHelperList' in r: del r['packageHelperList']
                if 'packageList' in r: del r['packageList']
                if 'referenceList' in r: del r['referenceList']
                if 'cveList' in r: del r['cveList']
            modify_sa_data = data_to_csv(diff["modify"], SA.COLUMN)
            self.send_file(modify_sa_data, filename="修改SA信息.csv")
        if len(diff["delete"]) > 0:
            for r in diff['delete']:
                if 'packageHelperList' in r: del r['packageHelperList']
                if 'packageList' in r: del r['packageList']
                if 'referenceList' in r: del r['referenceList']
                if 'cveList' in r: del r['cveList']
            delete_sa_data = data_to_csv(diff["delete"], SA.COLUMN)
            self.send_file(delete_sa_data, filename="删减SA信息.csv")

    def pretty_sa_record(self, record):
        return (
                "`编号:{}`\n" +
                " 包名: **{}**\n" +
                " CVEID: {}\n" +
                " 发布时间: **{}**\n" +
                " [详情链接](https://www.openeuler.org/zh/security/safety-bulletin/detail/?id={})\n"
        ).format(
            record["securityNoticeNo"],
            record["affectedComponent"],
            record["cveId"],
            record["updateTime"],
            record["securityNoticeNo"],
        )

    def pretty_sa_udpate(self, diff):
        message = (
                "### Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: **<font color=\"info\">OK</font>**\n" +
                "服务IP: **<font color=\"info\">{}</font>**\n" +
                "SA记录总数: **<font color=\"red\">{}</font>**\n" +
                "更新情况:\n" +
                " 新增:**<font color=\"red\">{}</font>**" +
                " 修改:**<font color=\"red\">{}</font>**" +
                " 删减:**<font color=\"red\">{}</font>**\n" +
                "Top**{}**变更信息概况:\n" +
                "\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            self.wanip,
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_sa_record(r)

        message += """\n**相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。**\n"""
        return message
